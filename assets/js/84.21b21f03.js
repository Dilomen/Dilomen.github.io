(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{478:function(t,r,s){"use strict";s.r(r);var a=s(28),e=Object(a.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"微前端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微前端"}},[t._v("#")]),t._v(" 微前端")]),t._v(" "),s("p",[t._v("qiankun 的一些解决方案")]),t._v(" "),s("p",[t._v("基座项目 通过 import-html-entry 插件去加载到 不同子项目的 url 对应的静态 html 文件，然后根据 processTpl 正则解析整个文本字符串，解析出 DOM、style、script 等标签")]),t._v(" "),s("p",[t._v("通过 execScripts 执行导出 export 内容，即 mount，unmount 等方法。然后进行对应的挂载")]),t._v(" "),s("h3",{attrs:{id:"js-隔离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-隔离"}},[t._v("#")]),t._v(" JS 隔离")]),t._v(" "),s("p",[t._v("主要就是 window 全局变量的隔离")]),t._v(" "),s("ul",[s("li",[t._v("快照隔离 SnapshotSandbox")])]),t._v(" "),s("p",[t._v("当子应用改变一个 window 属性值时，通过一个变量存储改属性的状态，当子应用销毁时，恢复原先的环境状态，所以只能支持但子应用，多个子应用同时存在会发生冲突")]),t._v(" "),s("p",[t._v("存在主要是为了兼容低浏览器不支持 ES6 的原因")]),t._v(" "),s("ul",[s("li",[t._v("代理隔离 ProxySandbox")])]),t._v(" "),s("p",[t._v("通过对 window 的 Proxy 代理，每一个子应用会生成 ProxySandbox 实例，当子应用改变 window 下的属性时，就会通过代理 set 到子应用下的对象变量，然后 get 时，会优先读取对象变量是否存在，存在使用对象变量中的属性，不存在就使用 window 下的")]),t._v(" "),s("h3",{attrs:{id:"样式隔离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#样式隔离"}},[t._v("#")]),t._v(" 样式隔离")]),t._v(" "),s("p",[t._v("ScopedCSS： 主要是对标签进行添加 prefix 的重写")])])}),[],!1,null,null,null);r.default=e.exports}}]);