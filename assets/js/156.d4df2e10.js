(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{550:function(t,v,_){"use strict";_.r(v);var a=_(28),l=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),_("p",[t._v("HTTP(超文本传输协议)")]),t._v(" "),_("ul",[_("li",[t._v("属于应用层，基于 TCP/IP 协议")]),t._v(" "),_("li",[t._v("http 是无连接的，一次连接只处理一次请求，请求结束即整个结束")]),t._v(" "),_("li",[t._v("http 是无状态的，对之前的状态不会有记录信息")]),t._v(" "),_("li",[t._v("http 可以发送任何数据内容，但是需要客户端和服务端进行提前协商，利于开发")])]),t._v(" "),_("h2",{attrs:{id:"报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#报文"}},[t._v("#")]),t._v(" 报文")]),t._v(" "),_("h3",{attrs:{id:"请求报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求报文"}},[t._v("#")]),t._v(" 请求报文")]),t._v(" "),_("ul",[_("li",[t._v("请求行: 请求方法名(GET，POST) + 请求 URL 尾路径名(/index.html 或 /upload) + HTTP 协议版本(HTTP/1.1) GET /upload HTTP/1.1")]),t._v(" "),_("li",[t._v("请求头: 由多个 key-value 组成\n"),_("ul",[_("li",[t._v("Host：是连接的目标主机与端口号")]),t._v(" "),_("li",[t._v("User-Agent：客户端的标识信息")]),t._v(" "),_("li",[t._v("cookie: 服务端设置的相关信息")]),t._v(" "),_("li",[t._v("...")])])]),t._v(" "),_("li",[t._v("空行: 用来告知服务器请求头结束")]),t._v(" "),_("li",[t._v("请求数据:由 key-value 组成，即我们发送给服务器的数据")])]),t._v(" "),_("h3",{attrs:{id:"响应报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应报文"}},[t._v("#")]),t._v(" 响应报文")]),t._v(" "),_("ul",[_("li",[t._v("状态行: HTTP 协议版本(HTTP/1.1) + 状态码(200) HTTP/1.1 200")]),t._v(" "),_("li",[t._v("响应头: 由多个 key-value 组成")]),t._v(" "),_("li",[t._v("响应正文: 由 key-value 组成，服务器返回的的数据")])]),t._v(" "),_("h2",{attrs:{id:"连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#连接"}},[t._v("#")]),t._v(" 连接")]),t._v(" "),_("p",[t._v("首先 HTTP 是建立在 TCP 上的，需要在 TCP 三次握手之后才能进行连接")]),t._v(" "),_("p",[t._v('利用 Wireshark 抓包工具拦截\n<a data-fancybox title=""TCP抓包"" href="/前端/TCP抓包0.png">'),_("img",{attrs:{src:"/%E5%89%8D%E7%AB%AF/TCP%E6%8A%93%E5%8C%850.png",alt:'"TCP抓包"'}})]),t._v(" "),_("p",[t._v("由图可知：\n第一次握手，向 118.89.19.172 发送一个 TCP 包，带上标志位 SYN，表示要建立一个连接，并确定能接收的最大报文段长度 MSS 为 1460")]),t._v(" "),_("p",[t._v("第二次握手，118.89.19.172 向 192.168.19.172 发送了一个 SYN+ACK 的报文段，表示接受连接请求")]),t._v(" "),_("p",[t._v("第三次握手，向 118.89.19.172 发送一个 ACK，告知接受到同意信息。")]),t._v(" "),_("p",[t._v("在 TCP3 次握手连接后，就可以进一次 HTTP 请求了")]),t._v(" "),_("h2",{attrs:{id:"版本区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本区别"}},[t._v("#")]),t._v(" 版本区别")]),t._v(" "),_("h4",{attrs:{id:"http1-0-http1-1-和-http2-0-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http1-0-http1-1-和-http2-0-的区别"}},[t._v("#")]),t._v(" HTTP1.0, HTTP1.1 和 HTTP2.0 的区别")]),t._v(" "),_("ul",[_("li",[t._v("HTTP1.0:作为 http 的第一个版本，每次请求都需要建立一个 TCP 链接，过多的连接会导致性能的下降。")]),t._v(" "),_("li",[t._v("HTTP1.1 作为 1.0 版本的升级，最大改进的就是支持持久连接，可以在一个 TCP 连接上发送多个 HTTP 请求。同时也增加了很多的字段来处理新的功能，如缓存处理等")]),t._v(" "),_("li",[t._v("HTTP2.0 实现\n"),_("ul",[_("li",[t._v("多路复用：允许一个 HTTP 请求发起多重请求/响应消息。")]),t._v(" "),_("li",[t._v("二进制分帧：应用层(HTTP/2)和传输层(TCP or UDP)之间增加一个- 二进制分帧层，实现低延迟和高吞吐量")]),t._v(" "),_("li",[t._v("首部压缩")]),t._v(" "),_("li",[t._v("服务器推送：之前都是只能由客户端向服务端先发送请求")])])])]),t._v(" "),_("p",[t._v("HTTPS"),_("br"),t._v("\n就是对传输数据进行加密的 HTTP 协议，现都是 TLS 实现，之前有 SSL 实现（依旧支持）")])])}),[],!1,null,null,null);v.default=l.exports}}]);